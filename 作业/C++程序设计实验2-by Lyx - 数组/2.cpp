/*

【问题描述】
从标准输入中输入两组整数(每行不超过20个整数，每组整数中元素不重复),合并两组整数，去掉在两组整数中都出现的整数，并按从大到小顺序排序输出（即两组整数集"异或"）。
【输入形式】
首先输入第一组整数，以一个空格分隔各个整数；然后在新的一行上输入第二组整数，以一个空格分隔，行末有回车换行。
【输出形式】
按从大到小顺序排序输出合并后的整数集（去掉在两组整数中都出现的整数，以一个空格分隔各个整数）。
【样例输入】
5 1 4 32 8 7 9 -6
5 2 87 10 1
【样例输出】
87 32 10 9 8 7 4 2 -6
【样例说明】
第一组整数为5   1   4   32   8   7   9   -6，第二组整数分别为5   2   87   10   1。将第一组和第二组整数合并（去掉在两组整数中都出现的整数5和1），
并从大到小顺序排序后结果为87   32   10   9   8   7   4   2   -6。
*/
#include<stdio.h>
int main()
{
    int p[100];
    int q[40];
    char m='0';
    int a = 0;
    int b = 0;
    while (m != '\n')
        scanf("%d%c", &p[a++], &m);
    m = '0';
    while (m != '\n')
        scanf("%d%c", &q[b++], &m);
    for (int i = 0;i < b;i++)
    {
        p[a + i] = q[i];
    }
    a = a + b;
    for (int i = 0;i < a;i++)
    {
        for (int k = 0;k < a - 1 - i;k++)
        {
            if (p[k] < p[k + 1])
    {
        int t = p[k];
    p[k] = p[k + 1];
    p[k + 1] = t;
            }
        }
    }
    for (int m = 0;m < a;m++) {
        if (m + 1 < a && p[m] == p[m + 1])
        {
            m++;
continue;
        }
        printf("%d ", p[m]);
    }
}
